{"ast":null,"code":"const login = async (email, password, navigate) => {\n  const {\n    data,\n    error\n  } = await supabase.auth.signInWithPassword({\n    email,\n    password\n  });\n  if (error) {\n    console.error('Login failed:', error);\n    return;\n  }\n\n  // Get user role from custom users table\n  const {\n    data: userInfo,\n    error: userError\n  } = await supabase.from('users').select('role').eq('id', data.user.id).single();\n  if (userInfo.role === 'authority') {\n    navigate('/dashboard');\n  } else {\n    navigate('/home');\n  }\n};","map":{"version":3,"names":["login","email","password","navigate","data","error","supabase","auth","signInWithPassword","console","userInfo","userError","from","select","eq","user","id","single","role"],"sources":["C:/Users/yukthasri/OneDrive/Desktop/HTML Tutorial/sambanova_project/civicflow/civicflow/src/pages/LoginPage.jsx"],"sourcesContent":["const login = async (email, password, navigate) => {\r\n  const { data, error } = await supabase.auth.signInWithPassword({ email, password });\r\n\r\n  if (error) {\r\n    console.error('Login failed:', error);\r\n    return;\r\n  }\r\n\r\n  // Get user role from custom users table\r\n  const { data: userInfo, error: userError } = await supabase\r\n    .from('users')\r\n    .select('role')\r\n    .eq('id', data.user.id)\r\n    .single();\r\n\r\n  if (userInfo.role === 'authority') {\r\n    navigate('/dashboard');\r\n  } else {\r\n    navigate('/home');\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,KAAK;EACjD,MAAM;IAAEC,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAMC,QAAQ,CAACC,IAAI,CAACC,kBAAkB,CAAC;IAAEP,KAAK;IAAEC;EAAS,CAAC,CAAC;EAEnF,IAAIG,KAAK,EAAE;IACTI,OAAO,CAACJ,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACrC;EACF;;EAEA;EACA,MAAM;IAAED,IAAI,EAAEM,QAAQ;IAAEL,KAAK,EAAEM;EAAU,CAAC,GAAG,MAAML,QAAQ,CACxDM,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,MAAM,CAAC,CACdC,EAAE,CAAC,IAAI,EAAEV,IAAI,CAACW,IAAI,CAACC,EAAE,CAAC,CACtBC,MAAM,CAAC,CAAC;EAEX,IAAIP,QAAQ,CAACQ,IAAI,KAAK,WAAW,EAAE;IACjCf,QAAQ,CAAC,YAAY,CAAC;EACxB,CAAC,MAAM;IACLA,QAAQ,CAAC,OAAO,CAAC;EACnB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}