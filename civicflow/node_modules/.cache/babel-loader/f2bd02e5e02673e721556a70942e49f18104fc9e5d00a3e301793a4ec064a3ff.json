{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yukthasri\\\\OneDrive\\\\Desktop\\\\HTML Tutorial\\\\sambanova_project\\\\civicflow\\\\civicflow\\\\src\\\\auth\\\\ProtectedRoute.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { supabase } from '../supabase/supabaseClient';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ProtectedRoute({\n  children,\n  allowedRoles\n}) {\n  _s();\n  const [isAuthorized, setIsAuthorized] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const checkRole = async () => {\n      const {\n        data: {\n          user\n        }\n      } = await supabase.auth.getUser();\n      if (!user) return navigate('/login');\n      const {\n        data: userInfo\n      } = await supabase.from('users').select('role').eq('id', user.id).single();\n      if (allowedRoles.includes(userInfo.role)) {\n        setIsAuthorized(true);\n      } else {\n        navigate('/unauthorized');\n      }\n    };\n    checkRole();\n  }, []);\n  return isAuthorized ? children : /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Checking access...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 36\n  }, this);\n}\n_s(ProtectedRoute, \"Y+51av5bVOOsIz/QKvLmbhZGGeI=\", false, function () {\n  return [useNavigate];\n});\n_c = ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["useEffect","useState","supabase","useNavigate","jsxDEV","_jsxDEV","ProtectedRoute","children","allowedRoles","_s","isAuthorized","setIsAuthorized","navigate","checkRole","data","user","auth","getUser","userInfo","from","select","eq","id","single","includes","role","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/yukthasri/OneDrive/Desktop/HTML Tutorial/sambanova_project/civicflow/civicflow/src/auth/ProtectedRoute.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { supabase } from '../supabase/supabaseClient';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport default function ProtectedRoute({ children, allowedRoles }) {\r\n  const [isAuthorized, setIsAuthorized] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const checkRole = async () => {\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) return navigate('/login');\r\n\r\n      const { data: userInfo } = await supabase\r\n        .from('users')\r\n        .select('role')\r\n        .eq('id', user.id)\r\n        .single();\r\n\r\n      if (allowedRoles.includes(userInfo.role)) {\r\n        setIsAuthorized(true);\r\n      } else {\r\n        navigate('/unauthorized');\r\n      }\r\n    };\r\n\r\n    checkRole();\r\n  }, []);\r\n\r\n  return isAuthorized ? children : <p>Checking access...</p>;\r\n}\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,QAAQ,QAAQ,4BAA4B;AACrD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,eAAe,SAASC,cAAcA,CAAC;EAAEC,QAAQ;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EACjE,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAMW,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAE9BH,SAAS,CAAC,MAAM;IACd,MAAMa,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAM;QAAEC,IAAI,EAAE;UAAEC;QAAK;MAAE,CAAC,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAACC,OAAO,CAAC,CAAC;MACxD,IAAI,CAACF,IAAI,EAAE,OAAOH,QAAQ,CAAC,QAAQ,CAAC;MAEpC,MAAM;QAAEE,IAAI,EAAEI;MAAS,CAAC,GAAG,MAAMhB,QAAQ,CACtCiB,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,MAAM,CAAC,CACdC,EAAE,CAAC,IAAI,EAAEN,IAAI,CAACO,EAAE,CAAC,CACjBC,MAAM,CAAC,CAAC;MAEX,IAAIf,YAAY,CAACgB,QAAQ,CAACN,QAAQ,CAACO,IAAI,CAAC,EAAE;QACxCd,eAAe,CAAC,IAAI,CAAC;MACvB,CAAC,MAAM;QACLC,QAAQ,CAAC,eAAe,CAAC;MAC3B;IACF,CAAC;IAEDC,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOH,YAAY,GAAGH,QAAQ,gBAAGF,OAAA;IAAAE,QAAA,EAAG;EAAkB;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;AAC5D;AAACpB,EAAA,CA1BuBH,cAAc;EAAA,QAEnBH,WAAW;AAAA;AAAA2B,EAAA,GAFNxB,cAAc;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}